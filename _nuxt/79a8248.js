(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{274:function(e,t,n){"use strict";function o(e){return(o=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}n.d(t,"a",(function(){return o}))},275:function(e,t,n){var o=n(2),r=n(28),c=n(70),l=n(7),f=n(10),v=n(56),m=n(280),y=n(4),d=r("Reflect","construct"),x=y((function(){function e(){}return!(d((function(){}),[],e)instanceof e)})),h=!y((function(){d((function(){}))})),S=x||h;o({target:"Reflect",stat:!0,forced:S,sham:S},{construct:function(e,t){c(e),l(t);var n=arguments.length<3?e:c(arguments[2]);if(h&&!x)return d(e,t,n);if(e==n){switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3])}var o=[null];return o.push.apply(o,t),new(m.apply(e,o))}var r=n.prototype,y=v(f(r)?r:Object.prototype),S=Function.apply.call(e,y,t);return f(S)?S:y}})},276:function(e,t,n){"use strict";function o(e,p){return(o=Object.setPrototypeOf||function(e,p){return e.__proto__=p,e})(e,p)}function r(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&o(e,t)}n.d(t,"a",(function(){return r}))},277:function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var o=n(279),r=n.n(o);function c(e,t){if(t&&("object"===r()(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}},278:function(e,t,n){"use strict";n.d(t,"a",(function(){return c}));var o=n(130),r=n(131),c=function(){function e(){Object(o.a)(this,e)}return Object(r.a)(e,[{key:"setSketch",value:function(e){this.sketch=e}},{key:"getSketch",value:function(){return this.sketch}}]),e}()},279:function(e,t){function n(t){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?(e.exports=n=function(e){return typeof e},e.exports.default=e.exports,e.exports.__esModule=!0):(e.exports=n=function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e.exports.default=e.exports,e.exports.__esModule=!0),n(t)}e.exports=n,e.exports.default=e.exports,e.exports.__esModule=!0},280:function(e,t,n){"use strict";var o=n(70),r=n(10),c=[].slice,l={},f=function(e,t,n){if(!(t in l)){for(var o=[],i=0;i<t;i++)o[i]="a["+i+"]";l[t]=Function("C,a","return new C("+o.join(",")+")")}return l[t](e,n)};e.exports=Function.bind||function(e){var t=o(this),n=c.call(arguments,1),l=function(){var o=n.concat(c.call(arguments));return this instanceof l?f(t,o.length,o):t.apply(e,o)};return r(t.prototype)&&(l.prototype=t.prototype),l}},358:function(e,t,n){"use strict";n.r(t),n.d(t,"default",(function(){return d}));n(275);var o=n(130),r=n(131),c=n(276),l=n(277),f=n(274),v=(n(24),n(273)),m=n(278);function y(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,o=Object(f.a)(e);if(t){var r=Object(f.a)(this).constructor;n=Reflect.construct(o,arguments,r)}else n=o.apply(this,arguments);return Object(l.a)(this,n)}}var d=function(e){Object(c.a)(n,e);var t=y(n);function n(){var e;return Object(o.a)(this,n),(e=t.apply(this,arguments)).name="Sea",e.debugObject={depthColor:"#186691",surfaceColor:"#9bd8ff"},e}return Object(r.a)(n,[{key:"init",value:function(){var e=this;this.waterGeometry=new v.jb(4,4,128,128),this.waterMaterial=new v.zb({vertexShader:"uniform float uTime;\nuniform float uBigWavesElevation;\nuniform vec2 uBigWavesFrequency;\nuniform float uBigWavesSpeed;\n\nuniform float uSmallWavesElevation;\nuniform float uSmallWavesFrequency;\nuniform float uSmallWavesSpeed;\nuniform float uSmallIterations;\n\nvarying float vElevation;\n\n// Classic Perlin 3D Noise\n// by Stefan Gustavson\n//\nvec4 permute(vec4 x)\n{\n    return mod(((x*34.0)+1.0)*x, 289.0);\n}\nvec4 taylorInvSqrt(vec4 r)\n{\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\nvec3 fade(vec3 t)\n{\n    return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\nfloat cnoise(vec3 P)\n{\n    vec3 Pi0 = floor(P); // Integer part for indexing\n    vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n    Pi0 = mod(Pi0, 289.0);\n    Pi1 = mod(Pi1, 289.0);\n    vec3 Pf0 = fract(P); // Fractional part for interpolation\n    vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n    vec4 iy = vec4(Pi0.yy, Pi1.yy);\n    vec4 iz0 = Pi0.zzzz;\n    vec4 iz1 = Pi1.zzzz;\n\n    vec4 ixy = permute(permute(ix) + iy);\n    vec4 ixy0 = permute(ixy + iz0);\n    vec4 ixy1 = permute(ixy + iz1);\n\n    vec4 gx0 = ixy0 / 7.0;\n    vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n    gx0 = fract(gx0);\n    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n    vec4 sz0 = step(gz0, vec4(0.0));\n    gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n    gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n    vec4 gx1 = ixy1 / 7.0;\n    vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n    gx1 = fract(gx1);\n    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n    vec4 sz1 = step(gz1, vec4(0.0));\n    gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n    gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n    vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n    vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n    vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n    vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n    vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n    vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n    vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n    vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n    g000 *= norm0.x;\n    g010 *= norm0.y;\n    g100 *= norm0.z;\n    g110 *= norm0.w;\n    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n    g001 *= norm1.x;\n    g011 *= norm1.y;\n    g101 *= norm1.z;\n    g111 *= norm1.w;\n\n    float n000 = dot(g000, Pf0);\n    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n    float n111 = dot(g111, Pf1);\n\n    vec3 fade_xyz = fade(Pf0);\n    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n    return 2.2 * n_xyz;\n}\n\nvoid main()\n{\n    vec4 modelPosition = modelMatrix * vec4(position, 1.0);\n\n    // Elevation\n    float elevation = sin(modelPosition.x * uBigWavesFrequency.x + uTime * uBigWavesSpeed) *\n                      sin(modelPosition.z * uBigWavesFrequency.y + uTime * uBigWavesSpeed) *\n                      uBigWavesElevation;\n\n    for(float i = 1.0; i <= 2.0; i++)\n    {\n        elevation -= abs(cnoise(vec3(modelPosition.xz * uSmallWavesFrequency * i, uTime * uSmallWavesSpeed)) * uSmallWavesElevation / i);\n    }\n\n    modelPosition.y += elevation;\n\n    vec4 viewPosition = viewMatrix * modelPosition;\n    vec4 projectedPosition = projectionMatrix * viewPosition;\n    gl_Position = projectedPosition;\n\n    vElevation = elevation;\n}",fragmentShader:"uniform vec3 uDepthColor;\nuniform vec3 uSurfaceColor;\nuniform float uColorOffset;\nuniform float uColorMultiplier;\n\nvarying float vElevation;\n\nvoid main()\n{\n    float mixStrength = (vElevation + uColorOffset) * uColorMultiplier;\n    vec3 color = mix(uDepthColor, uSurfaceColor, mixStrength);\n\n\n    gl_FragColor = vec4(color, 1.0);\n}",uniforms:{uTime:{value:0},uBigWavesElevation:{value:.2},uBigWavesFrequency:{value:new v.Nb(4,1.5)},uBigWavesSpeed:{value:.75},uSmallWavesElevation:{value:.15},uSmallWavesFrequency:{value:3},uSmallWavesSpeed:{value:.2},uSmallIterations:{value:4},uDepthColor:{value:new v.n(this.debugObject.depthColor)},uSurfaceColor:{value:new v.n(this.debugObject.surfaceColor)},uColorOffset:{value:.08},uColorMultiplier:{value:5},uNormalMap:{value:null}}}),this.sea=new v.R(this.waterGeometry,this.waterMaterial),this.sea.position.y=-.5,this.sea.rotation.x=.5*-Math.PI,this.getSketch().getScene().add(this.sea),this.waterMaterial.uniforms.uNormalMap.value=this.getSketch().getLoaders().textureLoader.load("./textures/moving_sea/wavemap.png"),this.getSketch().getGui().add(this.waterMaterial.uniforms.uBigWavesElevation,"value").min(0).max(1).step(.001).name("uBigWavesElevation"),this.getSketch().getGui().add(this.waterMaterial.uniforms.uBigWavesFrequency.value,"x").min(0).max(10).step(.001).name("uBigWavesFrequencyX"),this.getSketch().getGui().add(this.waterMaterial.uniforms.uBigWavesFrequency.value,"y").min(0).max(10).step(.001).name("uBigWavesFrequencyY"),this.getSketch().getGui().add(this.waterMaterial.uniforms.uBigWavesSpeed,"value").min(0).max(4).step(.001).name("uBigWavesSpeed"),this.getSketch().getGui().add(this.waterMaterial.uniforms.uSmallWavesElevation,"value").min(0).max(1).step(.001).name("uSmallWavesElevation"),this.getSketch().getGui().add(this.waterMaterial.uniforms.uSmallWavesFrequency,"value").min(0).max(30).step(.001).name("uSmallWavesFrequency"),this.getSketch().getGui().add(this.waterMaterial.uniforms.uSmallWavesSpeed,"value").min(0).max(4).step(.001).name("uSmallWavesSpeed"),this.getSketch().getGui().add(this.waterMaterial.uniforms.uSmallIterations,"value").min(0).max(5).step(1).name("uSmallIterations"),this.getSketch().getGui().add(this.waterMaterial.uniforms.uColorOffset,"value").min(0).max(1).step(.001).name("uColorOffset"),this.getSketch().getGui().add(this.waterMaterial.uniforms.uColorMultiplier,"value").min(0).max(10).step(.001).name("uColorMultiplier"),this.getSketch().getGui().addColor(this.debugObject,"depthColor").onChange((function(){e.waterMaterial.uniforms.uDepthColor.value.set(e.debugObject.depthColor)})),this.getSketch().getGui().addColor(this.debugObject,"surfaceColor").onChange((function(){e.waterMaterial.uniforms.uSurfaceColor.value.set(e.debugObject.surfaceColor)})),console.log("add sea")}},{key:"update",value:function(e){this.sea.material.uniforms.uTime.value=e}},{key:"destroy",value:function(){this.getSketch().getScene().remove(this.sea),this.waterGeometry.dispose(),this.waterMaterial.dispose(),console.log("removed sea")}}]),n}(m.a)}}]);